{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Gestures = void 0;\n\nvar _constants = require(\"./web/constants\");\n\nvar _FlingGestureHandler = _interopRequireDefault(require(\"./web/FlingGestureHandler\"));\n\nvar _LongPressGestureHandler = _interopRequireDefault(require(\"./web/LongPressGestureHandler\"));\n\nvar _NativeViewGestureHandler = _interopRequireDefault(require(\"./web/NativeViewGestureHandler\"));\n\nvar NodeManager = _interopRequireWildcard(require(\"./web/NodeManager\"));\n\nvar _PanGestureHandler = _interopRequireDefault(require(\"./web/PanGestureHandler\"));\n\nvar _PinchGestureHandler = _interopRequireDefault(require(\"./web/PinchGestureHandler\"));\n\nvar _RotationGestureHandler = _interopRequireDefault(require(\"./web/RotationGestureHandler\"));\n\nvar _TapGestureHandler = _interopRequireDefault(require(\"./web/TapGestureHandler\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Gestures = {\n  PanGestureHandler: _PanGestureHandler.default,\n  RotationGestureHandler: _RotationGestureHandler.default,\n  PinchGestureHandler: _PinchGestureHandler.default,\n  TapGestureHandler: _TapGestureHandler.default,\n  NativeViewGestureHandler: _NativeViewGestureHandler.default,\n  LongPressGestureHandler: _LongPressGestureHandler.default,\n  FlingGestureHandler: _FlingGestureHandler.default\n};\nexports.Gestures = Gestures;\nvar _default = {\n  Direction: _constants.Direction,\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (!(handlerName in Gestures)) throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n    var GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _usingDeviceEvents, propsRef) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    NodeManager.dropGestureHandler(handlerTag);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["Gestures","PanGestureHandler","RotationGestureHandler","PinchGestureHandler","TapGestureHandler","NativeViewGestureHandler","LongPressGestureHandler","FlingGestureHandler","Direction","handleSetJSResponder","console","handleClearJSResponder","createGestureHandler","handlerName","GestureClass","NodeManager","attachGestureHandler","updateGestureHandler","getGestureHandlerNode","dropGestureHandler"],"mappings":";;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,mBAAA;;AACA,IAAA,oBAAA,GAAA,sBAAA,CAAA,OAAA,6BAAA,CAAA;;AACA,IAAA,wBAAA,GAAA,sBAAA,CAAA,OAAA,iCAAA,CAAA;;AACA,IAAA,yBAAA,GAAA,sBAAA,CAAA,OAAA,kCAAA,CAAA;;AACA,IAAA,WAAA,GAAA,uBAAA,CAAA,OAAA,qBAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,2BAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,sBAAA,CAAA,OAAA,6BAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,sBAAA,CAAA,OAAA,gCAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,2BAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,QAAQ,GAAG;AACtBC,EAAAA,iBAAiB,EAAjBA,kBAAAA,CADsB,OAAA;AAEtBC,EAAAA,sBAAsB,EAAtBA,uBAAAA,CAFsB,OAAA;AAGtBC,EAAAA,mBAAmB,EAAnBA,oBAAAA,CAHsB,OAAA;AAItBC,EAAAA,iBAAiB,EAAjBA,kBAAAA,CAJsB,OAAA;AAKtBC,EAAAA,wBAAwB,EAAxBA,yBAAAA,CALsB,OAAA;AAMtBC,EAAAA,uBAAuB,EAAvBA,wBAAAA,CANsB,OAAA;AAOtBC,EAAAA,mBAAmB,EAAnBA,oBAAAA,CAPsB;AAAA,CAAjB;;eAWQ;AACbC,EAAAA,SAAS,EAATA,UAAAA,CADa,SAAA;AAEbC,EAAAA,oBAFa,gCAEO,GAFP,EAEO,oBAFP,EAEoD;AAC/DC,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,wBAAAA,EAAAA,GAAAA,EAAAA,oBAAAA;AAHW,GAAA;AAKbC,EAAAA,sBALa,oCAKY;AACvBD,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,0BAAAA;AANW,GAAA;AAQbE,EAAAA,oBARa,gCAQO,WARP,EAQO,UARP,EAQO,MARP,EAYX;AAEA,QAAI,EAAEC,WAAW,IAAjB,QAAI,CAAJ,EACE,MAAM,IAAA,KAAA,oCAAN,WAAM,+BAAN;AAGF,QAAMC,YAAY,GAAGd,QAAQ,CAA7B,WAA6B,CAA7B;AACAe,IAAAA,WAAW,CAAXA,oBAAAA,CAAAA,UAAAA,EAA6C,IAA7CA,YAA6C,EAA7CA;AACA,SAAA,oBAAA,CAAA,UAAA,EAAA,MAAA;AApBW,GAAA;AAsBbC,EAAAA,oBAtBa,gCAsBO,UAtBP,EAsBO,OAtBP,EAsBO,kBAtBP,EAsBO,QAtBP,EA2BX;AACAD,IAAAA,WAAW,CAAXA,UAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA,OAAAA,EAAAA,QAAAA;AA5BW,GAAA;AA8BbE,EAAAA,oBA9Ba,gCA8BO,UA9BP,EA8BO,SA9BP,EA8B4C;AACvDF,IAAAA,WAAW,CAAXA,UAAAA,CAAAA,UAAAA,EAAAA,mBAAAA,CAAAA,SAAAA;AA/BW,GAAA;AAiCbG,EAAAA,qBAjCa,iCAiCQ,UAjCR,EAiC6B;AACxC,WAAOH,WAAW,CAAXA,UAAAA,CAAP,UAAOA,CAAP;AAlCW,GAAA;AAoCbI,EAAAA,kBApCa,8BAoCK,UApCL,EAoC0B;AACrCJ,IAAAA,WAAW,CAAXA,kBAAAA,CAAAA,UAAAA;AACD;AAtCY,C","sourcesContent":["import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\n\nexport const Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler,\n  // ForceTouchGestureHandler,\n};\n\nexport default {\n  Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    //TODO(TS) extends config\n    if (!(handlerName in Gestures))\n      throw new Error(\n        `react-native-gesture-handler: ${handlerName} is not supported on web.`\n      );\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    _usingDeviceEvents: boolean,\n    propsRef: React.RefObject<unknown>\n  ) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler(handlerTag: number, newConfig: any) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler(handlerTag: number) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}