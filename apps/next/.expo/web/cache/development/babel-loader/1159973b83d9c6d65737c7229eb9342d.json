{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeViewGestureHandler = exports.nativeViewProps = exports.nativeViewGestureHandlerProps = void 0;\n\nvar _createHandler = _interopRequireDefault(require(\"./createHandler\"));\n\nvar _gestureHandlerCommon = require(\"./gestureHandlerCommon\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar nativeViewGestureHandlerProps = ['shouldActivateOnStart', 'disallowInterruption'];\nexports.nativeViewGestureHandlerProps = nativeViewGestureHandlerProps;\nvar nativeViewProps = [].concat(_toConsumableArray(_gestureHandlerCommon.baseGestureHandlerProps), nativeViewGestureHandlerProps);\nexports.nativeViewProps = nativeViewProps;\nvar NativeViewGestureHandler = (0, _createHandler.default)({\n  name: 'NativeViewGestureHandler',\n  allowedProps: nativeViewProps,\n  config: {}\n});\nexports.NativeViewGestureHandler = NativeViewGestureHandler;","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["nativeViewGestureHandlerProps","nativeViewProps","baseGestureHandlerProps","NativeViewGestureHandler","name","allowedProps","config"],"mappings":";;;;;;;;;AAAA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA;;AACA,IAAA,qBAAA,GAAA,OAAA,0BAAA;;;;;;;;AAKO,IAAMA,6BAA6B,GAAG,CAAA,uBAAA,EAAtC,sBAAsC,CAAtC;;AAgCA,IAAMC,eAAe,gCACvBC,qBAAAA,CAD0B,uBAAH,GAArB,6BAAqB,CAArB;;AAOA,IAAMC,wBAAwB,GAAG,CAAA,GAAA,cAAA,CAAA,OAAA,EAGtC;AACAC,EAAAA,IAAI,EADJ,0BAAA;AAEAC,EAAAA,YAAY,EAFZ,eAAA;AAGAC,EAAAA,MAAM,EAAE;AAHR,CAHsC,CAAjC","sourcesContent":["import createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const nativeViewGestureHandlerProps = [\n  'shouldActivateOnStart',\n  'disallowInterruption',\n] as const;\n\nexport interface NativeViewGestureConfig {\n  /**\n   * Android only.\n   *\n   * Determines whether the handler should check for an existing touch event on\n   * instantiation.\n   */\n  shouldActivateOnStart?: boolean;\n\n  /**\n   * When `true`, cancels all other gesture handlers when this\n   * `NativeViewGestureHandler` receives an `ACTIVE` state event.\n   */\n  disallowInterruption?: boolean;\n}\n\nexport interface NativeViewGestureHandlerProps\n  extends BaseGestureHandlerProps<NativeViewGestureHandlerPayload>,\n    NativeViewGestureConfig {}\n\nexport type NativeViewGestureHandlerPayload = {\n  /**\n   * True if gesture was performed inside of containing view, false otherwise.\n   */\n  pointerInside: boolean;\n};\n\nexport const nativeViewProps = [\n  ...baseGestureHandlerProps,\n  ...nativeViewGestureHandlerProps,\n] as const;\n\nexport type NativeViewGestureHandler = typeof NativeViewGestureHandler;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const NativeViewGestureHandler = createHandler<\n  NativeViewGestureHandlerProps,\n  NativeViewGestureHandlerPayload\n>({\n  name: 'NativeViewGestureHandler',\n  allowedProps: nativeViewProps,\n  config: {},\n});\n"]},"metadata":{},"sourceType":"script"}