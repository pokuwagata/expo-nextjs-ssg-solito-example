{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureDetector = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _gesture = require(\"./gesture\");\n\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\n\nvar _handlersRegistry = require(\"../handlersRegistry\");\n\nvar _RNGestureHandlerModule = _interopRequireDefault(require(\"../../RNGestureHandlerModule\"));\n\nvar _gestureHandlerCommon = require(\"../gestureHandlerCommon\");\n\nvar _gestureStateManager = require(\"./gestureStateManager\");\n\nvar _FlingGestureHandler = require(\"../FlingGestureHandler\");\n\nvar _ForceTouchGestureHandler = require(\"../ForceTouchGestureHandler\");\n\nvar _LongPressGestureHandler = require(\"../LongPressGestureHandler\");\n\nvar _PanGestureHandler = require(\"../PanGestureHandler\");\n\nvar _TapGestureHandler = require(\"../TapGestureHandler\");\n\nvar _State = require(\"../../State\");\n\nvar _EventType = require(\"../../EventType\");\n\nvar _Reanimated$default$c, _Reanimated$default;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar ALLOWED_PROPS = [].concat(_toConsumableArray(_gestureHandlerCommon.baseGestureHandlerWithMonitorProps), _toConsumableArray(_TapGestureHandler.tapGestureHandlerProps), _toConsumableArray(_PanGestureHandler.panGestureHandlerProps), _toConsumableArray(_PanGestureHandler.panGestureHandlerCustomNativeProps), _toConsumableArray(_LongPressGestureHandler.longPressGestureHandlerProps), _toConsumableArray(_ForceTouchGestureHandler.forceTouchGestureHandlerProps), _toConsumableArray(_FlingGestureHandler.flingGestureHandlerProps));\n\nfunction convertToHandlerTag(ref) {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof _gesture.BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    var _ref$current$handlerT, _ref$current;\n\n    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup) {\n  var _interactionGroup$map, _interactionGroup$map2;\n\n  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {\n    return tag > 0;\n  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\n\nfunction dropHandlers(preparedGesture) {\n  for (var _iterator = _createForOfIteratorHelperLoose(preparedGesture.config), _step; !(_step = _iterator()).done;) {\n    var handler = _step.value;\n\n    _RNGestureHandlerModule.default.dropGestureHandler(handler.handlerTag);\n\n    (0, _handlersRegistry.unregisterHandler)(handler.handlerTag);\n  }\n}\n\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n      gestureConfig = _ref.gestureConfig,\n      gesture = _ref.gesture,\n      viewTag = _ref.viewTag,\n      useAnimated = _ref.useAnimated;\n\n  if (!preparedGesture.firstExecution) {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  setImmediate(function () {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  });\n\n  var _loop = function _loop(handler) {\n    _RNGestureHandlerModule.default.createGestureHandler(handler.handlerName, handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS));\n\n    (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler);\n    setImmediate(function () {\n      var requireToFail = [];\n\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      var simultaneousWith = [];\n\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n      }\n\n      _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n    });\n  };\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(gesture), _step2; !(_step2 = _iterator2()).done;) {\n    var handler = _step2.value;\n\n    _loop(handler);\n  }\n\n  preparedGesture.config = gesture;\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(preparedGesture.config), _step3; !(_step3 = _iterator3()).done;) {\n    var _gesture2 = _step3.value;\n\n    _RNGestureHandlerModule.default.attachGestureHandler(_gesture2.handlerTag, viewTag, !useAnimated);\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = gesture.map(function (g) {\n      return g.handlers;\n    });\n  }\n}\n\nfunction updateHandlers(preparedGesture, gestureConfig, gesture) {\n  gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n\n  for (var i = 0; i < gesture.length; i++) {\n    var handler = preparedGesture.config[i];\n    gesture[i].handlerTag = handler.handlerTag;\n    gesture[i].handlers.handlerTag = handler.handlerTag;\n  }\n\n  setImmediate(function () {\n    for (var _i = 0; _i < gesture.length; _i++) {\n      var _handler = preparedGesture.config[_i];\n      _handler.config = gesture[_i].config;\n      _handler.handlers = gesture[_i].handlers;\n      _handler.handlers.handlerTag = _handler.handlerTag;\n      var requireToFail = extractValidHandlerTags(_handler.config.requireToFail);\n      var simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);\n\n      _RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(_handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n\n      (0, _handlersRegistry.registerHandler)(_handler.handlerTag, _handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = preparedGesture.config.map(function (g) {\n        return g.handlers;\n      });\n    }\n  });\n}\n\nfunction needsToReattach(preparedGesture, gesture) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n\n  for (var i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(preparedGesture) {\n  if (!_reanimatedWrapper.Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(event) {\n    'worklet';\n\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(event) {\n    'worklet';\n\n    return event.eventType != null;\n  }\n\n  function getHandler(type, gesture) {\n    'worklet';\n\n    switch (type) {\n      case _gesture.CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n\n      case _gesture.CALLBACK_TYPE.START:\n        return gesture.onStart;\n\n      case _gesture.CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n\n      case _gesture.CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n\n      case _gesture.CALLBACK_TYPE.END:\n        return gesture.onEnd;\n\n      case _gesture.CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n\n      case _gesture.CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n\n      case _gesture.CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n\n      case _gesture.CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n\n      case _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType) {\n    'worklet';\n\n    switch (eventType) {\n      case _EventType.EventType.TOUCHES_DOWN:\n        return _gesture.CALLBACK_TYPE.TOUCHES_DOWN;\n\n      case _EventType.EventType.TOUCHES_MOVE:\n        return _gesture.CALLBACK_TYPE.TOUCHES_MOVE;\n\n      case _EventType.EventType.TOUCHES_UP:\n        return _gesture.CALLBACK_TYPE.TOUCHES_UP;\n\n      case _EventType.EventType.TOUCHES_CANCELLED:\n        return _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n\n    return _gesture.CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(type, gesture, event) {\n    'worklet';\n\n    var handler = getHandler(type, gesture);\n\n    if (gesture.isWorklet[type]) {\n      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n      }\n\n      handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  var sharedHandlersCallbacks = _reanimatedWrapper.Reanimated.useSharedValue(null);\n\n  var lastUpdateEvent = _reanimatedWrapper.Reanimated.useSharedValue([]);\n\n  var stateControllers = [];\n\n  var callback = function callback(event) {\n    'worklet';\n\n    var currentCallback = sharedHandlersCallbacks.value;\n\n    if (!currentCallback) {\n      return;\n    }\n\n    for (var i = 0; i < currentCallback.length; i++) {\n      var gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {\n            runWorklet(_gesture.CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {\n            runWorklet(_gesture.CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (event.oldState !== event.state && event.state === _State.State.END) {\n            if (event.oldState === _State.State.ACTIVE) {\n              runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, true);\n            }\n\n            runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.state !== event.oldState) {\n            if (event.oldState === _State.State.ACTIVE) {\n              runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, false);\n            }\n\n            runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = _gestureStateManager.GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== _EventType.EventType.UNDETERMINED) {\n            runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n          }\n        } else {\n          runWorklet(_gesture.CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            var _gesture$changeEventC;\n\n            runWorklet(_gesture.CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  var event = _reanimatedWrapper.Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], true);\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\nvar GestureDetector = function GestureDetector(props) {\n  var _gestureConfig$toGest, _gestureConfig$toGest2;\n\n  var gestureConfig = props.gesture;\n  var gesture = (_gestureConfig$toGest = gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$toGest2 = gestureConfig.toGestureArray) === null || _gestureConfig$toGest2 === void 0 ? void 0 : _gestureConfig$toGest2.call(gestureConfig)) !== null && _gestureConfig$toGest !== void 0 ? _gestureConfig$toGest : [];\n  var useAnimated = gesture.find(function (gesture) {\n    return gesture.handlers.isWorklet.reduce(function (prev, current) {\n      return prev || current;\n    });\n  }) != null;\n  var viewRef = (0, _react.useRef)(null);\n  var firstRenderRef = (0, _react.useRef)(true);\n\n  var preparedGesture = _react.default.useRef({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error('You cannot change whether you are using gesture or animatedGesture while the app is running');\n  }\n\n  if (preparedGesture.firstExecution) {\n    var _gestureConfig$initia;\n\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$initia = gestureConfig.initialize) === null || _gestureConfig$initia === void 0 ? void 0 : _gestureConfig$initia.call(gestureConfig);\n  }\n\n  if (useAnimated) {\n    useAnimatedGesture(preparedGesture);\n  }\n\n  (0, _react.useEffect)(function () {\n    firstRenderRef.current = true;\n    var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(viewRef.current);\n    attachHandlers({\n      preparedGesture: preparedGesture,\n      gestureConfig: gestureConfig,\n      gesture: gesture,\n      viewTag: viewTag,\n      useAnimated: useAnimated\n    });\n    return function () {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n  (0, _react.useEffect)(function () {\n    if (!firstRenderRef.current) {\n      var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(viewRef.current);\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture: preparedGesture,\n          gestureConfig: gestureConfig,\n          gesture: gesture,\n          viewTag: viewTag,\n          useAnimated: useAnimated\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return _react.default.createElement(AnimatedWrap, {\n      ref: viewRef,\n      onGestureHandlerEvent: preparedGesture.animatedEventHandler\n    }, props.children);\n  } else {\n    return _react.default.createElement(Wrap, {\n      ref: viewRef\n    }, props.children);\n  }\n};\n\nexports.GestureDetector = GestureDetector;\n\nvar Wrap = function (_react$default$Compon) {\n  _inherits(Wrap, _react$default$Compon);\n\n  var _super = _createSuper(Wrap);\n\n  function Wrap() {\n    _classCallCheck(this, Wrap);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Wrap, [{\n    key: \"render\",\n    value: function render() {\n      var child = _react.default.Children.only(this.props.children);\n\n      return _react.default.cloneElement(child, {\n        collapsable: false\n      }, child.props.children);\n    }\n  }]);\n\n  return Wrap;\n}(_react.default.Component);\n\nvar AnimatedWrap = (_Reanimated$default$c = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : (_Reanimated$default = _reanimatedWrapper.Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;","map":{"version":3,"sources":["GestureDetector.tsx"],"names":["ALLOWED_PROPS","baseGestureHandlerWithMonitorProps","tapGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","longPressGestureHandlerProps","forceTouchGestureHandlerProps","flingGestureHandlerProps","ref","BaseGesture","interactionGroup","tag","preparedGesture","RNGestureHandlerModule","handler","useAnimated","gestureConfig","setImmediate","requireToFail","extractValidHandlerTags","simultaneousWith","simultaneousHandlers","waitFor","gesture","g","i","Reanimated","event","CALLBACK_TYPE","EventType","getHandler","console","sharedHandlersCallbacks","lastUpdateEvent","stateControllers","callback","currentCallback","isStateChangeEvent","State","runWorklet","isTouchEvent","GestureStateManager","touchEventTypeToCallbackType","GestureDetector","props","prev","viewRef","firstRenderRef","config","animatedEventHandler","animatedHandlers","firstExecution","useAnimatedGesture","viewTag","attachHandlers","dropHandlers","needsToReattach","updateHandlers","React","render","child","collapsable","AnimatedWrap"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  GestureType,\n  HandlerCallbacks,\n  BaseGesture,\n  GestureRef,\n  CALLBACK_TYPE,\n} from './gesture';\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\nimport {\n  baseGestureHandlerWithMonitorProps,\n  filterConfig,\n  findNodeHandle,\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\nimport {\n  panGestureHandlerProps,\n  panGestureHandlerCustomNativeProps,\n} from '../PanGestureHandler';\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport { ComposedGesture } from './gestureComposition';\n\nconst ALLOWED_PROPS = [\n  ...baseGestureHandlerWithMonitorProps,\n  ...tapGestureHandlerProps,\n  ...panGestureHandlerProps,\n  ...panGestureHandlerCustomNativeProps,\n  ...longPressGestureHandlerProps,\n  ...forceTouchGestureHandlerProps,\n  ...flingGestureHandlerProps,\n];\n\nexport type GestureConfigReference = {\n  config: GestureType[];\n  animatedEventHandler: unknown;\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  firstExecution: boolean;\n  useAnimated: boolean;\n};\n\nfunction convertToHandlerTag(ref: GestureRef): number {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    // @ts-ignore in this case it should be a ref either to gesture object or\n    // a gesture handler component, in both cases handlerTag property exists\n    return ref.current?.handlerTag ?? -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\n  return (\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\n  );\n}\n\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\n  for (const handler of preparedGesture.config) {\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n\n    unregisterHandler(handler.handlerTag);\n  }\n}\n\ninterface AttachHandlersConfig {\n  preparedGesture: GestureConfigReference;\n  gestureConfig: ComposedGesture | GestureType | undefined;\n  gesture: GestureType[];\n  viewTag: number;\n  useAnimated: boolean;\n}\n\nfunction attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesture,\n  viewTag,\n  useAnimated,\n}: AttachHandlersConfig) {\n  if (!preparedGesture.firstExecution) {\n    gestureConfig?.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  // use setImmediate to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  setImmediate(() => {\n    gestureConfig?.prepare();\n  });\n\n  for (const handler of gesture) {\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler);\n\n    // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(() => {\n      let requireToFail: number[] = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      let simultaneousWith: number[] = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(\n          handler.config.simultaneousWith\n        );\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n    });\n  }\n  preparedGesture.config = gesture;\n\n  for (const gesture of preparedGesture.config) {\n    RNGestureHandlerModule.attachGestureHandler(\n      gesture.handlerTag,\n      viewTag,\n      !useAnimated // send direct events when using animatedGesture, device events otherwise\n    );\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = (gesture.map(\n      (g) => g.handlers\n    ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n  }\n}\n\nfunction updateHandlers(\n  preparedGesture: GestureConfigReference,\n  gestureConfig: ComposedGesture | GestureType | undefined,\n  gesture: GestureType[]\n) {\n  gestureConfig?.prepare();\n\n  for (let i = 0; i < gesture.length; i++) {\n    const handler = preparedGesture.config[i];\n\n    gesture[i].handlerTag = handler.handlerTag;\n    gesture[i].handlers.handlerTag = handler.handlerTag;\n  }\n\n  // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  setImmediate(() => {\n    for (let i = 0; i < gesture.length; i++) {\n      const handler = preparedGesture.config[i];\n\n      handler.config = gesture[i].config;\n      handler.handlers = gesture[i].handlers;\n      handler.handlers.handlerTag = handler.handlerTag;\n\n      const requireToFail = extractValidHandlerTags(\n        handler.config.requireToFail\n      );\n\n      const simultaneousWith = extractValidHandlerTags(\n        handler.config.simultaneousWith\n      );\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n\n      registerHandler(handler.handlerTag, handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = (preparedGesture.config.map(\n        (g) => g.handlers\n      ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n    }\n  });\n}\n\nfunction needsToReattach(\n  preparedGesture: GestureConfigReference,\n  gesture: GestureType[]\n) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (let i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(preparedGesture: GestureConfigReference) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureStateChangeEvent {\n    'worklet';\n    // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureTouchEvent {\n    'worklet';\n    return event.eventType != null;\n  }\n\n  function getHandler(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>\n  ) {\n    'worklet';\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType: EventType): CALLBACK_TYPE {\n    'worklet';\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>,\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\n    ...args: any[]\n  ) {\n    'worklet';\n    const handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n      // @ts-ignore Logic below makes sure the correct event is send to the\n      // correct handler.\n      handler?.(event, ...args);\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  // Hooks are called conditionally, but the condition is whether the\n  // react-native-reanimated is installed, which shouldn't change while running\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  >(null);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const lastUpdateEvent = Reanimated.useSharedValue<\n    (GestureUpdateEvent | undefined)[]\n  >([]);\n\n  // not every gesture needs a state controller, init them lazily\n  const stateControllers: GestureStateManagerType[] = [];\n\n  const callback = (\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\n  ) => {\n    'worklet';\n\n    const currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n\n    for (let i = 0; i < currentCallback.length; i++) {\n      const gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (\n            event.oldState === State.UNDETERMINED &&\n            event.state === State.BEGAN\n          ) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if (\n            (event.oldState === State.BEGAN ||\n              event.oldState === State.UNDETERMINED) &&\n            event.state === State.ACTIVE\n          ) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (\n            event.oldState !== event.state &&\n            event.state === State.END\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if (\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\n            event.state !== event.oldState\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(\n              touchEventTypeToCallbackType(event.eventType),\n              gesture,\n              event,\n              stateControllers[i]\n            );\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            runWorklet(\n              CALLBACK_TYPE.CHANGE,\n              gesture,\n              gesture.changeEventCalculator?.(\n                event,\n                lastUpdateEvent.value[gesture.handlerTag]\n              )\n            );\n\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const event = Reanimated.useEvent(\n    callback,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    true\n  );\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\ninterface GestureDetectorProps {\n  gesture?: ComposedGesture | GestureType;\n}\nexport const GestureDetector: React.FunctionComponent<GestureDetectorProps> = (\n  props\n) => {\n  const gestureConfig = props.gesture;\n  const gesture = gestureConfig?.toGestureArray?.() ?? [];\n  const useAnimated =\n    gesture.find((gesture) =>\n      gesture.handlers.isWorklet.reduce((prev, current) => prev || current)\n    ) != null;\n  const viewRef = useRef(null);\n  const firstRenderRef = useRef(true);\n\n  const preparedGesture = React.useRef<GestureConfigReference>({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated,\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error(\n      'You cannot change whether you are using gesture or animatedGesture while the app is running'\n    );\n  }\n\n  if (preparedGesture.firstExecution) {\n    gestureConfig?.initialize?.();\n  }\n\n  if (useAnimated) {\n    // Whether animatedGesture or gesture is used shouldn't change\n    // during while an app is running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedGesture(preparedGesture);\n  }\n\n  useEffect(() => {\n    firstRenderRef.current = true;\n    const viewTag = findNodeHandle(viewRef.current) as number;\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesture,\n      viewTag,\n      useAnimated,\n    });\n\n    return () => {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!firstRenderRef.current) {\n      const viewTag = findNodeHandle(viewRef.current) as number;\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesture,\n          viewTag,\n          useAnimated,\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return (\n      <AnimatedWrap\n        ref={viewRef}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={viewRef}>{props.children}</Wrap>;\n  }\n};\n\nclass Wrap extends React.Component<{ onGestureHandlerEvent?: unknown }> {\n  render() {\n    // I don't think that fighting with types over such a simple function is worth it\n    // The only thing it does is add 'collapsable: false' to the child component\n    // to make sure it is in the native view hierarchy so the detector can find\n    // correct viewTag to attach to.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const child: any = React.Children.only(this.props.children);\n\n    return React.cloneElement(\n      child,\n      { collapsable: false },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      child.props.children\n    );\n  }\n}\n\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\n"]},"metadata":{},"sourceType":"script"}