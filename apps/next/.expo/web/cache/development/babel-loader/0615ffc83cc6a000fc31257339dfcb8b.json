{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureStateManager = void 0;\n\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\n\nvar _State = require(\"../../State\");\n\nvar GestureStateManager = {\n  create: function create(handlerTag) {\n    'worklet';\n\n    return {\n      begin: function begin() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.BEGAN);\n        } else {\n          console.warn('react-native-reanimated is required in order to use synchronous state management');\n        }\n      },\n      activate: function activate() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.ACTIVE);\n        } else {\n          console.warn('react-native-reanimated is required in order to use synchronous state management');\n        }\n      },\n      fail: function fail() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.FAILED);\n        } else {\n          console.warn('react-native-reanimated is required in order to use synchronous state management');\n        }\n      },\n      end: function end() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.END);\n        } else {\n          console.warn('react-native-reanimated is required in order to use synchronous state management');\n        }\n      }\n    };\n  }\n};\nexports.GestureStateManager = GestureStateManager;","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["GestureStateManager","create","begin","Reanimated","State","console","activate","fail","end"],"mappings":";;;;;;;AAAA,IAAA,kBAAA,GAAA,OAAA,uBAAA;;AACA,IAAA,MAAA,GAAA,OAAA,eAAA;;AASO,IAAMA,mBAAmB,GAAG;AACjCC,EAAAA,MADiC,kBAC3B,UAD2B,EACmB;AAClD;;AACA,WAAO;AACLC,MAAAA,KAAK,EAAE,iBAAM;AACX;;AACA,YAAIC,kBAAAA,CAAJ,UAAA,EAAgB;AACdA,UAAAA,kBAAAA,CAAAA,UAAAA,CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,MAAAA,CAAAA,KAAAA,CAAvCD,KAAAA;AADF,SAAA,MAEO;AACLE,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AATE,OAAA;AAYLC,MAAAA,QAAQ,EAAE,oBAAM;AACd;;AACA,YAAIH,kBAAAA,CAAJ,UAAA,EAAgB;AACdA,UAAAA,kBAAAA,CAAAA,UAAAA,CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,MAAAA,CAAAA,KAAAA,CAAvCD,MAAAA;AADF,SAAA,MAEO;AACLE,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AApBE,OAAA;AAuBLE,MAAAA,IAAI,EAAE,gBAAM;AACV;;AACA,YAAIJ,kBAAAA,CAAJ,UAAA,EAAgB;AACdA,UAAAA,kBAAAA,CAAAA,UAAAA,CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,MAAAA,CAAAA,KAAAA,CAAvCD,MAAAA;AADF,SAAA,MAEO;AACLE,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AA/BE,OAAA;AAkCLG,MAAAA,GAAG,EAAE,eAAM;AACT;;AACA,YAAIL,kBAAAA,CAAJ,UAAA,EAAgB;AACdA,UAAAA,kBAAAA,CAAAA,UAAAA,CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,MAAAA,CAAAA,KAAAA,CAAvCD,GAAAA;AADF,SAAA,MAEO;AACLE,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AACF;AA3CI,KAAP;AA6CD;AAhDgC,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}